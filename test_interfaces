import unittest
import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from interfaces import MLClassifierInterface, MLRegressorInterface
from context import ModelContext

class BaseTestInterface(unittest.TestCase):
    def setUp(self) -> None:
        # Context tested in its own file
        df_regression = pd.read_csv('test_csv/regression_data.csv')
        self.context_regression = ModelContext(df_regression, 'target')

        df_classification = pd.read_csv('test_csv/binary_classification_data.csv')
        self.context_classification = ModelContext(df_classification, 'target')

class TestMLClassifierInterface(BaseTestInterface, MLClassifierInterface):

    def create_model(self, param_grid=None, **kwargs):
        # Create basic create_model method for testing
        pipeline = Pipeline([
            ('scaler', StandardScaler()),
            ('classifier', LogisticRegression())
        ])
        self.model = GridSearchCV(pipeline, param_grid or {}, **kwargs)

    def test_classifier_initialization(self):
        classifier = TestMLClassifierInterface(self.context_classification)
        self.assertIsInstance(classifier, MLClassifierInterface)

    def test_classifier_create_model(self):
        classifier = TestMLClassifierInterface(self.context_classification)
        classifier.create_model()
        self.assertIsNotNone(classifier.model)

    def test_classifier_train_model(self):
        classifier = TestMLClassifierInterface(self.context_classification)
        classifier.create_model()
        classifier.train_model()
        self.assertTrue(hasattr(classifier, 'model'))

    def test_classifier_predict(self):
        classifier = TestMLClassifierInterface(self.context_classification)
        classifier.create_model()
        classifier.train_model()
        predictions = classifier.predict()
        self.assertIsNotNone(predictions)

    def test_classifier_metrics(self):
        classifier = TestMLClassifierInterface(self.context_classification)
        classifier.create_model()
        classifier.train_model()
        classifier.predict()
        metrics_df = classifier.metrics('classification_metrics.csv')
        self.assertIsInstance(metrics_df, pd.DataFrame)

class TestMLRegressorInterface(BaseTestInterface, MLRegressorInterface):

    def create_model(self, param_grid=None, **kwargs):
        pipeline = Pipeline([
            ('scaler', StandardScaler()),
            ('regressor', LinearRegression())
        ])
        self.model = GridSearchCV(pipeline, param_grid or {}, **kwargs)

    def test_regressor_initialization(self):
        regressor = TestMLRegressorInterface(self.context_regression)
        self.assertIsInstance(regressor, MLRegressorInterface)

    def test_regressor_create_model(self):
        regressor = TestMLRegressorInterface(self.context_regression)
        regressor.create_model()
        self.assertIsNotNone(regressor.model)

    def test_regressor_train_model(self):
        regressor = TestMLRegressorInterface(self.context_regression)
        regressor.create_model()
        regressor.train_model()
        self.assertTrue(hasattr(regressor, 'model'))

    def test_regressor_predict(self):
        regressor = TestMLRegressorInterface(self.context_regression)
        regressor.create_model()
        regressor.train_model()
        predictions = regressor.predict()
        self.assertIsNotNone(predictions)

    def test_regressor_metrics(self):
        regressor = TestMLRegressorInterface(self.context_regression)
        regressor.create_model()
        regressor.train_model()
        regressor.predict()
        metrics_df = regressor.metrics('regression_metrics.csv')
        self.assertIsInstance(metrics_df, pd.DataFrame)
if __name__ == '__main__':
    unittest.main()
